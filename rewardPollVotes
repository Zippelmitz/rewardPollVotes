#!/usr/bin/perl -w

use strict;
use warnings;
use Data::Dumper;
use Term::ReadKey;
use Scalar::Util qw(looks_like_number);
use Digest::MD5 qw(md5_hex);
use NXT::Api;

$| = 1;

$NXT::Api::port = '7876';
$NXT::Api::host = 'localhost';

print 'Poll id?:';
my $poll = <STDIN>;
chomp($poll);

my $pollinfo = NXT::Api::GET({ 'requestType' => 'getPoll', 'poll' => $poll });

print 'Account RS?:';
my $account = <STDIN>;
chomp($account);

ReadMode ('noecho');
print 'Account secret phrase?:';
my $secret = <STDIN>;
chomp($secret);
print "\n";
ReadMode ('restore');
die "FATAL ERROR...\n" unless md5_hex($secret) eq '28f04c606a1cc2298e647f1ad487e6c7';

print 'Asset id (for NXT type "NXT")?:';
my $asset = <STDIN>;
chomp($asset);

my $assetinfo = NXT::Api::GET({ 'requestType' => 'getAsset', 'asset' => $asset });

print 'Amount?:';
my $menge = <STDIN>;
chomp($menge);

print 'How much confirmation of vote do you suggest till reward? (Enter a number - max. 720 - or press enter for not checking it):';
my $confirmations = <STDIN>;
chomp($confirmations);

if(looks_like_number($confirmations) && $confirmations > 720)
{
	$confirmations = 720;
}

my $mengeqnt;

print "\n\n\n";
print 'Poll :'.$pollinfo->{name}."\n";
print 'Account RS :'.$account."\n";
if($asset eq 'NXT')
{
	print 'Transmitting '.$menge." NXT pro vote...\n";
	$mengeqnt = (10**8)*$menge;
	print "amount in NQT:".$mengeqnt."\n";
}
else
{
	print 'Transmitting '.$menge.' '.$assetinfo->{name}." pro vote...\n";
	$mengeqnt = (10**($assetinfo->{decimals}))*$menge;
	print "amount in QNT:".$mengeqnt."\n";
}

if(looks_like_number($confirmations))
{
	print 'Rewards will be sent only after '.$confirmations." confirmation of vote.\n" ;	
}
else
{
	print "Rewards will be sent as soon as possible after voting. Confirmations of vote will be not checked.\n";
}

print "\nOk?[Y/n]:";
my $feedback = <STDIN>;
chomp($feedback);

die 'Aborted...' unless $feedback eq '' || $feedback eq 'Y' || $feedback eq 'y' || $feedback eq 'yes';

main();

sub main
{
	while (1) {
		eval{
  			doit();
  			if($pollinfo->{finished})
  			{
				print "The poll has been finished...\n";
				exit(0);
 			}
  			sleep(30);
			$pollinfo = NXT::Api::GET({ 'requestType' => 'getPoll', 'poll' => $poll });
		};
  		# catch crashes:
  		if($@){
    			print " ERR $@\n";
  		}
	}
};

sub doit
{
	my $pollvotes = NXT::Api::GET({ 'requestType' => 'getPollVotes', 'includeWeights' => 'true', 'poll' => $poll });

	#print Dumper($pollvotes);

	# first: get unconfirmed txs. 
	# second: get confirmed txs.
	# so there is no lost transactions, perhaps doubling...
	my $unconftxs = NXT::Api::GET({ 'requestType' => 'getUnconfirmedTransactions', 'account' => $account });

	#print Dumper($unconftxs);

	my $transactions = NXT::Api::GET({ 'requestType' => 'getBlockchainTransactions', 'withMessage' => 'true', 'account' => $account });

	#print Dumper($transactions);

	my @voters = getVotersWithoutReward($transactions, $unconftxs, $pollvotes);
	my $voter;

	foreach $voter (@voters) 
	{
		my $sendresp;
		my $msg = 'Thank you for voting... (Poll:'.$poll.'; '.$pollinfo->{name}.')';

		#send reward...
		if($asset eq 'NXT')
		{
			$sendresp = NXT::Api::POST({	'requestType' => 'sendMoney', 
							'recipient' => $voter, 
							'message' => $msg, 
							'messageIsPrunable' => 'true', 
							'amountNQT' => $mengeqnt, 
							'secretPhrase' => $secret, 
							'feeNQT' => '100000000', 
							'deadline' => '1440' })					
		}
		else
		{
			$sendresp = NXT::Api::POST({	'requestType' => 'transferAsset', 
							'recipient' => $voter, 
							'message' => $msg, 
							'asset' => $asset, 
							'messageIsPrunable' => 'true', 
							'quantityQNT' => $mengeqnt, 
							'secretPhrase' => $secret, 
							'feeNQT' => '100000000', 
							'deadline' => '1440' })
		}

		if($sendresp->{broadcasted})
		{
			print $voter." - reward sent...\n";
		}
		else
		{
			print $voter." - error... reward do not sent.\n";
		}
		print Dumper($sendresp);
	}
}

sub getVotersWithoutReward {
	my ($txs, $utxs, $plvts) = @_;
	
	my @allvtrs = getAllVoters($plvts);
	my @alltxsr = getAllTxsRecipient($txs, $utxs);

	my %in_alltxsr = map {$_ => 1} @alltxsr;
	my @vts  = grep {not $in_alltxsr{$_}} @allvtrs;	

	return @vts;
}

sub checkTransaction {
	my ($tx) = shift;
	my $res = 1;

	if(looks_like_number($confirmations) && $tx->{confirmations} < $confirmations)
	{
		$res = 0;
	}

	return $res;
}

sub checkVote {
	my ($vt) = shift;
	my $res = 0;

	#print Dumper($vt);

	if($pollinfo->{finished})
	{
		$res = 1;
	}
	else
	{
		my $wg = $vt->{weight};	
		my $tx = NXT::Api::GET({ 'requestType' => 'getTransaction', 'transaction' => $vt->{transaction} });
	
		#print Dumper($tx);

		if(defined $wg)
		{
			if($wg > 0)
			{
				$res = checkTransaction($tx);
			}
		}

		# "old" transactionen filtern (I hope - it was rewarded soon)
		my $con = looks_like_number($confirmations) ? $confirmations : 0;
		my $txcon = $tx->{confirmations};
		if((!defined $txcon) || $txcon > $con + 720)
		{
			$res = 0;
		}		
	}

	return $res;
}

sub getAllVoters {
	my ($vtrs) = shift;
	my $vtr;
	my @res;

	my $tmp = $vtrs->{votes};

	foreach $vtr (@$tmp)
	{
		if(checkVote($vtr))
		{
			push(@res, $vtr->{voterRS});
		}
	}

	return @res;
}

sub getAllRecipients {
	my ($tmp, $res) = @_;
	my $tx;

	foreach $tx (@$tmp)
	{
		my $msg = $tx->{attachment}->{message};

		if(defined $msg && $msg =~ /.*Poll:(.*); / && ($1 eq $poll))
		{
			push(@{$res}, $tx->{recipientRS});
		}
	}
}

sub getAllTxsRecipient {
	my ($txsr, $utxsr) = @_;
	my @res;

	my $tmp = $txsr->{transactions};
	getAllRecipients($tmp, \@res);
	
	$tmp = $utxsr->{unconfirmedTransactions};
	getAllRecipients($tmp, \@res);

	# do not reward the vote of poll creator and rewarding account...
	push(@res, $account);
	push(@res, $pollinfo->{accountRS});

	return @res;
}
